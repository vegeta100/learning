1.4 shell进行数学运算

let，其参数是算术运算表达式，表达式中的常量就不是字符串了，而是整数
算术表达式中$a是a的值，并不是变量a。把$a这样一个常量放赋值表达式左边是错的。

同样地，$[]里面是算术运算表达式，不是字符串。
if[]里面也是一样

$() ``
这两个都是不消除任何特殊含义
$[] $(())
这两个包含算术运算，但未必是算术表达式，目前看到的例子，[]包住的只是等式的右边。
从上到下，括号等级高了，也从命令变成算术表达式了。

以上是整数相关的运算，所以，shell脚本里只能用整数运算？
脚本并不是需求严格的应用程序，整数就足够了。需要小数的时候，shell脚本里有另外的工具。
毕竟，文件描述符是整数，很少有什么东西是小数的，



1.5 文件描述符和重定向
标准错误似乎是标准输出的一部分

$？是系统变量？
echo $?会打印上一条命令执行的退出状态

标准输入，stdin
echo a1这条命令是由标准输入流接收的，或者说，标准输入流读取键盘输入
键盘输入属于标准输入，不完全等同于标准输入，不然，管道的左边是标准输入就说不通了

/dev/null
为什么是空设备来表示空文件呢？
1˃ 标准输出重定向
2˃ 标准错误重定向
一个命令执行正常，会定向到标准输出；而执行错误，则定向到标准错误。
1> 2>用于给标准输出、标准错误重定向到不同的文件。

&> 符号的含义是，不论标准错误还是标准输出，都定向到同一个文件。

tee,三通，可以理解为three
