BASH
linux上的命令解释程序
用来解释shell命令，如rm mkdir等，称为shell命令解释器，也就很合理了

双关语：
Bourne again/Born again
可以理解为命令解释器、或bash命令集，但能否理解为shell脚本编程呢？
Born again，理解为基于unix的新生shell；Bourne again，则理解为伯恩编写的shell
again，指新的一版shell吗？得查查看

shell：外壳的意思
区别于“核”，同时与“核”有关系
这个猜测没错，它给用户提供操作界面，类似于windows下的cmd.exe。rm mkdir等命令多少和内核有关
有了它，rm mkdir这些命令的执行才能达到预期的效果，它的作用就是解释命令，所以称它为命令解释器是对的。

--help、man，这两者的区别，需要研究一下。

Usage: date [OPTION]... [+FORMAT]

``，不消除任何特殊含义，所以可以识别bash
等号旁边用了空格，命令解释器会把其中的一部分当成命令。
shell全是字符串类型，也就省去了类型定义
如：log=$d.log

``用了，执行结果就不会显示出来了。

$普通用户，#root用户
#等级3，$等级4。#更高级，代表root用户

变量前要加$，不然bash会判断为某个字母或单词。


/bin/bash指定了命令解释器的路径，shell脚本得以执行。即便不指定，也会有默认的解释器执行shell命令。
像平时在$或#下输入命令，也有默认的shell命令解释器，不然命令不会凭空执行的。
/bin，就是二进制文件，即可执行文件。它下面的bash等等都是可执行的。

.bashrc，rc是run commands的意思，是吗？
个人认为，run configurations的意思更为接近。

> 为重定向符，0 1 2是标准输入、标准输出、标准错误，通常shell命令是定向到标准输出文件。重定向说的就是文件的重定向。
echo hello 
就是从标准输入定向到标准输出

git bash只是个壳，windows不是linux内核，所以，切换到root用户、top、man等需要linux内核的命令是无法解释的。

top: the  types,  order  and size of information displayed for processes
ps: report snapshot of current progress. | progress
理解为两种意思中的其中一种应该都行
grep: global regular express print
用正则表达式搜索并打印搜索到的行

.bashrc是run configurations ，还是run commands？
这里确实是在执行一组命令，但是从功能的意义上来说，又是配置的意思。

从设计的角度上来看，.***rc就该是隐藏文件，配置信息对用户而言是不必要的、冗杂的。

proc
进程信息虚拟文件系统
process 后面省略3到4个单词

''   ""
第一个消除所有特殊含义，第二个消除了$ " '以外的特殊含义
配合反引号``一起理解，``不消除特殊含义；""消除一部分特殊含义；''消除所有特殊含义
符号严格程度：``>"">''

环境变量，系统预定义好的变量。

$a   ${a}
第二种用法，不但可以引用变量，还可以引用变量的长度、数组变量的第一个元素等
也就是说，不加{}只能引用变量本身，加了{}可以引用变量的其他含义。
环境变量用大写字母，windows下的环境变量也是如此。

shell脚本，是一行一行执行的。当一行中有两条语句的时候，需要加 ; ,命令解释器才能加以识别。

-f判断是否是普通文件，用在if的中括号里
脚本语言都比较简洁，相比编程语言
-f在bash里是短选项，在shell脚本编程里是判断用的

.   /etc/bashrc
在当前目录下，执行/etc/bashrc文件

|
管道符号可以把两个命令执行连在一起
管道符右边的命令为何不能带参数？比如grep 带上-nr，以后再看吧。
重定向到某个文件，再用管道就没意义了，执行结果已经定向到某个文件，自然不能传给管道
|，管道，相当于重定向为标准输入，你想啊，如果不是标准输入，那命令是怎么执行的？

管道，将左边的标准输出转为标准输入，传给右边的命令
毕竟最终也会生成标准输出，所以嘛，这个设计是合理的

选项要加上- --，才好判断是选项还是别的东东，有些命令是不加选项的。所以，- --是个重要的标识符。
